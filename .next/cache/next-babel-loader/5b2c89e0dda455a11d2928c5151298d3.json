{"ast":null,"code":"import inherits from 'inherits';\nimport Ids from 'ids';\nimport BaseViewer from './BaseViewer';\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Modeler} for a bundle that includes actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\n\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options); // hook ID collection into the modeler\n\n  this.on('import.parse.complete', function (event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.context);\n    }\n  }, this);\n  this.on('diagram.destroy', function () {\n    this.get('moddle').ids.clear();\n  }, this);\n}\ninherits(BaseModeler, BaseViewer);\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\n\nBaseModeler.prototype._createModdle = function (options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options); // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n\n\n  moddle.ids = new Ids([32, 36, 1]);\n  return moddle;\n};\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\n\n\nBaseModeler.prototype._collectIds = function (definitions, context) {\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id; // remove references from previous import\n\n  ids.clear();\n\n  for (id in context.elementsById) {\n    ids.claim(id, context.elementsById[id]);\n  }\n};","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/BaseModeler.js"],"names":["inherits","Ids","BaseViewer","BaseModeler","options","call","on","event","error","_collectIds","definitions","context","get","ids","clear","prototype","_createModdle","moddle","$model","id","elementsById","claim"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAGA;;;;;;;;;;;;;;AAaA,eAAe,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC3CF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,OAAtB,EAD2C,CAG3C;;AACA,OAAKE,EAAL,CAAQ,uBAAR,EAAiC,UAASC,KAAT,EAAgB;AAC/C,QAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,WAAKC,WAAL,CAAiBF,KAAK,CAACG,WAAvB,EAAoCH,KAAK,CAACI,OAA1C;AACD;AACF,GAJD,EAIG,IAJH;AAMA,OAAKL,EAAL,CAAQ,iBAAR,EAA2B,YAAW;AACpC,SAAKM,GAAL,CAAS,QAAT,EAAmBC,GAAnB,CAAuBC,KAAvB;AACD,GAFD,EAEG,IAFH;AAGD;AAEDd,QAAQ,CAACG,WAAD,EAAcD,UAAd,CAAR;AAGA;;;;;;AAKAC,WAAW,CAACY,SAAZ,CAAsBC,aAAtB,GAAsC,UAASZ,OAAT,EAAkB;AACtD,MAAIa,MAAM,GAAGf,UAAU,CAACa,SAAX,CAAqBC,aAArB,CAAmCX,IAAnC,CAAwC,IAAxC,EAA8CD,OAA9C,CAAb,CADsD,CAGtD;AACA;AACA;;;AACAa,EAAAA,MAAM,CAACJ,GAAP,GAAa,IAAIZ,GAAJ,CAAQ,CAAE,EAAF,EAAM,EAAN,EAAU,CAAV,CAAR,CAAb;AAEA,SAAOgB,MAAP;AACD,CATD;AAWA;;;;;;;;;AAOAd,WAAW,CAACY,SAAZ,CAAsBN,WAAtB,GAAoC,UAASC,WAAT,EAAsBC,OAAtB,EAA+B;AAEjE,MAAIM,MAAM,GAAGP,WAAW,CAACQ,MAAzB;AAAA,MACIL,GAAG,GAAGI,MAAM,CAACJ,GADjB;AAAA,MAEIM,EAFJ,CAFiE,CAMjE;;AACAN,EAAAA,GAAG,CAACC,KAAJ;;AAEA,OAAKK,EAAL,IAAWR,OAAO,CAACS,YAAnB,EAAiC;AAC/BP,IAAAA,GAAG,CAACQ,KAAJ,CAAUF,EAAV,EAAcR,OAAO,CAACS,YAAR,CAAqBD,EAArB,CAAd;AACD;AACF,CAZD","sourcesContent":["import inherits from 'inherits';\n\nimport Ids from 'ids';\n\nimport BaseViewer from './BaseViewer';\n\n\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Modeler} for a bundle that includes actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options);\n\n  // hook ID collection into the modeler\n  this.on('import.parse.complete', function(event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.context);\n    }\n  }, this);\n\n  this.on('diagram.destroy', function() {\n    this.get('moddle').ids.clear();\n  }, this);\n}\n\ninherits(BaseModeler, BaseViewer);\n\n\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\nBaseModeler.prototype._createModdle = function(options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options);\n\n  // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n  moddle.ids = new Ids([ 32, 36, 1 ]);\n\n  return moddle;\n};\n\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\nBaseModeler.prototype._collectIds = function(definitions, context) {\n\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id;\n\n  // remove references from previous import\n  ids.clear();\n\n  for (id in context.elementsById) {\n    ids.claim(id, context.elementsById[id]);\n  }\n};"]},"metadata":{},"sourceType":"module"}