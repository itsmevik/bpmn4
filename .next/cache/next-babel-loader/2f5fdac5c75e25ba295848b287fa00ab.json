{"ast":null,"code":"import { getNewShapePosition } from '../../auto-place/AutoPlaceUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is } from '../../../util/ModelUtil';\nexport default function AutoPlaceBehavior(eventBus, gridSnapping) {\n  eventBus.on('autoPlace', function (context) {\n    var source = context.source,\n        sourceMid = getMid(source),\n        shape = context.shape;\n    var position = getNewShapePosition(source, shape);\n    ['x', 'y'].forEach(function (axis) {\n      var options = {}; // do not snap if x/y equal\n\n      if (position[axis] === sourceMid[axis]) {\n        return;\n      }\n\n      if (position[axis] > sourceMid[axis]) {\n        options.min = position[axis];\n      } else {\n        options.max = position[axis];\n      }\n\n      if (is(shape, 'bpmn:TextAnnotation')) {\n        if (isHorizontal(axis)) {\n          options.offset = -shape.width / 2;\n        } else {\n          options.offset = -shape.height / 2;\n        }\n      }\n\n      position[axis] = gridSnapping.snapValue(position[axis], options);\n    }); // must be returned to be considered by auto place\n\n    return position;\n  });\n}\nAutoPlaceBehavior.$inject = ['eventBus', 'gridSnapping']; // helpers //////////\n\nfunction isHorizontal(axis) {\n  return axis === 'x';\n}","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/grid-snapping/behavior/AutoPlaceBehavior.js"],"names":["getNewShapePosition","getMid","is","AutoPlaceBehavior","eventBus","gridSnapping","on","context","source","sourceMid","shape","position","forEach","axis","options","min","max","isHorizontal","offset","width","height","snapValue","$inject"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,gCAApC;AAEA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,EAAT,QAAmB,yBAAnB;AAGA,eAAe,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,YAArC,EAAmD;AAChED,EAAAA,QAAQ,CAACE,EAAT,CAAY,WAAZ,EAAyB,UAASC,OAAT,EAAkB;AACzC,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;AAAA,QACIC,SAAS,GAAGR,MAAM,CAACO,MAAD,CADtB;AAAA,QAEIE,KAAK,GAAGH,OAAO,CAACG,KAFpB;AAIA,QAAIC,QAAQ,GAAGX,mBAAmB,CAACQ,MAAD,EAASE,KAAT,CAAlC;AAEA,KAAE,GAAF,EAAO,GAAP,EAAaE,OAAb,CAAqB,UAASC,IAAT,EAAe;AAClC,UAAIC,OAAO,GAAG,EAAd,CADkC,CAGlC;;AACA,UAAIH,QAAQ,CAAEE,IAAF,CAAR,KAAqBJ,SAAS,CAAEI,IAAF,CAAlC,EAA4C;AAC1C;AACD;;AAED,UAAIF,QAAQ,CAAEE,IAAF,CAAR,GAAmBJ,SAAS,CAAEI,IAAF,CAAhC,EAA0C;AACxCC,QAAAA,OAAO,CAACC,GAAR,GAAcJ,QAAQ,CAAEE,IAAF,CAAtB;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACE,GAAR,GAAcL,QAAQ,CAAEE,IAAF,CAAtB;AACD;;AAED,UAAIX,EAAE,CAACQ,KAAD,EAAQ,qBAAR,CAAN,EAAsC;AAEpC,YAAIO,YAAY,CAACJ,IAAD,CAAhB,EAAwB;AACtBC,UAAAA,OAAO,CAACI,MAAR,GAAiB,CAACR,KAAK,CAACS,KAAP,GAAe,CAAhC;AACD,SAFD,MAEO;AACLL,UAAAA,OAAO,CAACI,MAAR,GAAiB,CAACR,KAAK,CAACU,MAAP,GAAgB,CAAjC;AACD;AAEF;;AAEDT,MAAAA,QAAQ,CAAEE,IAAF,CAAR,GAAmBR,YAAY,CAACgB,SAAb,CAAuBV,QAAQ,CAAEE,IAAF,CAA/B,EAAyCC,OAAzC,CAAnB;AAED,KA1BD,EAPyC,CAmCzC;;AACA,WAAOH,QAAP;AACD,GArCD;AAsCD;AAEDR,iBAAiB,CAACmB,OAAlB,GAA4B,CAC1B,UAD0B,EAE1B,cAF0B,CAA5B,C,CAKA;;AAEA,SAASL,YAAT,CAAsBJ,IAAtB,EAA4B;AAC1B,SAAOA,IAAI,KAAK,GAAhB;AACD","sourcesContent":["import { getNewShapePosition } from '../../auto-place/AutoPlaceUtil';\r\n\r\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\r\nimport { is } from '../../../util/ModelUtil';\r\n\r\n\r\nexport default function AutoPlaceBehavior(eventBus, gridSnapping) {\r\n  eventBus.on('autoPlace', function(context) {\r\n    var source = context.source,\r\n        sourceMid = getMid(source),\r\n        shape = context.shape;\r\n\r\n    var position = getNewShapePosition(source, shape);\r\n\r\n    [ 'x', 'y' ].forEach(function(axis) {\r\n      var options = {};\r\n\r\n      // do not snap if x/y equal\r\n      if (position[ axis ] === sourceMid[ axis ]) {\r\n        return;\r\n      }\r\n\r\n      if (position[ axis ] > sourceMid[ axis ]) {\r\n        options.min = position[ axis ];\r\n      } else {\r\n        options.max = position[ axis ];\r\n      }\r\n\r\n      if (is(shape, 'bpmn:TextAnnotation')) {\r\n\r\n        if (isHorizontal(axis)) {\r\n          options.offset = -shape.width / 2;\r\n        } else {\r\n          options.offset = -shape.height / 2;\r\n        }\r\n\r\n      }\r\n\r\n      position[ axis ] = gridSnapping.snapValue(position[ axis ], options);\r\n\r\n    });\r\n\r\n    // must be returned to be considered by auto place\r\n    return position;\r\n  });\r\n}\r\n\r\nAutoPlaceBehavior.$inject = [\r\n  'eventBus',\r\n  'gridSnapping'\r\n];\r\n\r\n// helpers //////////\r\n\r\nfunction isHorizontal(axis) {\r\n  return axis === 'x';\r\n}"]},"metadata":{},"sourceType":"module"}