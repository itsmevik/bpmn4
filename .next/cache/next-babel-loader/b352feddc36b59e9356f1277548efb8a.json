{"ast":null,"code":"import { pick, assign, filter, forEach, isArray, isUndefined, has } from 'min-dash';\nimport { is, getBusinessObject } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\nimport { isExpanded, isEventSubProcess } from '../../util/DiUtil';\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar CUSTOM_PROPERTIES = ['cancelActivity', 'instantiate', 'eventGatewayType', 'triggeredByEvent', 'isInterrupting'];\n\nfunction toggeling(element, target) {\n  var oldCollapsed = element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element);\n  var targetCollapsed;\n\n  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {\n    // property is explicitly set so use it\n    targetCollapsed = has(target, 'collapsed') ? target.collapsed : !target.isExpanded;\n  } else {\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    element.collapsed = oldCollapsed;\n    return true;\n  }\n\n  return false;\n}\n/**\n * This module takes care of replacing BPMN elements\n */\n\n\nexport default function BpmnReplace(bpmnFactory, elementFactory, moddleCopy, modeling, replace, selection) {\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n  function replaceElement(element, target, hints) {\n    hints = hints || {};\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject)) {\n      if (type === 'bpmn:SubProcess') {\n        if (toggeling(element, target)) {\n          // expanding or collapsing process\n          modeling.toggleCollapse(element);\n          return element;\n        }\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps); // initialize special properties defined in target definition\n\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n    var properties = filter(copyProps, function (propertyName) {\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      } // retain loop characteristics if the target element\n      // is not an event sub process\n\n\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      } // so the applied properties from 'target' don't get lost\n\n\n      if (newBusinessObject.hasOwnProperty(propertyName)) {\n        return false;\n      }\n\n      if (propertyName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return true;\n    });\n    newBusinessObject = moddleCopy.copyElement(oldBusinessObject, newBusinessObject, properties); // initialize custom BPMN extensions\n\n    if (target.eventDefinitionType) {\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n      if (isSubProcess(oldBusinessObject)) {\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(oldBusinessObject);\n      } // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n          newElement.isExpanded = target.isExpanded;\n        } // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n\n\n      if (isExpanded(oldBusinessObject) && !is(oldBusinessObject, 'bpmn:Task') && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    } // remove children if not expanding sub process\n\n\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    } // transform collapsed/expanded pools\n\n\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      } // apply same width and default height\n\n\n      newElement.width = element.width;\n      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name; // retain default flow's reference between inclusive <-> exclusive gateways and activities\n\n    if (isAny(oldBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity']) && isAny(newBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity'])) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if (target.host && !is(oldBusinessObject, 'bpmn:BoundaryEvent') && is(newBusinessObject, 'bpmn:BoundaryEvent')) {\n      newElement.host = target.host;\n    }\n\n    newElement.di = {}; // fill and stroke will be set to DI\n\n    copyProperties(oldBusinessObject.di, newElement.di, ['fill', 'stroke']);\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\nBpmnReplace.$inject = ['bpmnFactory', 'elementFactory', 'moddleCopy', 'modeling', 'replace', 'selection'];\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n  var bo = getBusinessObject(element);\n  return type && bo.get('eventDefinitions').some(function (definition) {\n    return is(definition, type);\n  });\n}\n/**\n * Compute intersection between two arrays.\n */\n\n\nfunction intersection(a1, a2) {\n  return a1.filter(function (el) {\n    return a2.indexOf(el) !== -1;\n  });\n}","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/replace/BpmnReplace.js"],"names":["pick","assign","filter","forEach","isArray","isUndefined","has","is","getBusinessObject","isAny","isExpanded","isEventSubProcess","getPropertyNames","copyProperties","source","target","properties","property","CUSTOM_PROPERTIES","toggeling","element","oldCollapsed","collapsed","targetCollapsed","BpmnReplace","bpmnFactory","elementFactory","moddleCopy","modeling","replace","selection","replaceElement","hints","type","oldBusinessObject","businessObject","isSubProcess","toggleCollapse","newBusinessObject","create","newElement","elementProps","$descriptor","newElementProps","copyProps","intersection","propertyName","hasEventDefinition","eventDefinitionType","hasOwnProperty","copyElement","width","height","moveChildren","processRef","_getDefaultSize","name","default","host","di","select","$inject","bo","get","some","definition","a1","a2","el","indexOf"],"mappings":"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","sourcesContent":["import {\n  pick,\n  assign,\n  filter,\n  forEach,\n  isArray,\n  isUndefined,\n  has\n} from 'min-dash';\n\nimport {\n  is,\n  getBusinessObject\n} from '../../util/ModelUtil';\n\nimport {\n  isAny\n} from '../modeling/util/ModelingUtil';\n\nimport {\n  isExpanded,\n  isEventSubProcess\n} from '../../util/DiUtil';\n\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar CUSTOM_PROPERTIES = [\n  'cancelActivity',\n  'instantiate',\n  'eventGatewayType',\n  'triggeredByEvent',\n  'isInterrupting'\n];\n\n\nfunction toggeling(element, target) {\n\n  var oldCollapsed = (\n    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)\n  );\n\n  var targetCollapsed;\n\n  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {\n\n    // property is explicitly set so use it\n    targetCollapsed = (\n      has(target, 'collapsed') ? target.collapsed : !target.isExpanded\n    );\n  } else {\n\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    element.collapsed = oldCollapsed;\n    return true;\n  }\n\n  return false;\n}\n\n\n\n/**\n * This module takes care of replacing BPMN elements\n */\nexport default function BpmnReplace(\n    bpmnFactory,\n    elementFactory,\n    moddleCopy,\n    modeling,\n    replace,\n    selection\n) {\n\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n  function replaceElement(element, target, hints) {\n\n    hints = hints || {};\n\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject)) {\n      if (type === 'bpmn:SubProcess') {\n        if (toggeling(element, target)) {\n\n          // expanding or collapsing process\n          modeling.toggleCollapse(element);\n\n          return element;\n        }\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps);\n\n    // initialize special properties defined in target definition\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n\n    var properties = filter(copyProps, function(propertyName) {\n\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      }\n\n      // retain loop characteristics if the target element\n      // is not an event sub process\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      // so the applied properties from 'target' don't get lost\n      if (newBusinessObject.hasOwnProperty(propertyName)) {\n        return false;\n      }\n\n      if (propertyName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return true;\n    });\n\n    newBusinessObject = moddleCopy.copyElement(\n      oldBusinessObject,\n      newBusinessObject,\n      properties\n    );\n\n    // initialize custom BPMN extensions\n    if (target.eventDefinitionType) {\n\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n\n      if (isSubProcess(oldBusinessObject)) {\n\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(oldBusinessObject);\n      }\n\n      // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n        newElement.isExpanded = target.isExpanded;\n      }\n\n      // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n      if ((isExpanded(oldBusinessObject) && !is(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    }\n\n    // remove children if not expanding sub process\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    }\n\n    // transform collapsed/expanded pools\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      }\n\n      // apply same width and default height\n      newElement.width = element.width;\n      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name;\n\n    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n    if (\n      isAny(oldBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ]) &&\n      isAny(newBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ])\n    ) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if (\n      target.host &&\n      !is(oldBusinessObject, 'bpmn:BoundaryEvent') &&\n      is(newBusinessObject, 'bpmn:BoundaryEvent')\n    ) {\n      newElement.host = target.host;\n    }\n\n    newElement.di = {};\n\n    // fill and stroke will be set to DI\n    copyProperties(oldBusinessObject.di, newElement.di, [\n      'fill',\n      'stroke'\n    ]);\n\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\n\nBpmnReplace.$inject = [\n  'bpmnFactory',\n  'elementFactory',\n  'moddleCopy',\n  'modeling',\n  'replace',\n  'selection'\n];\n\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n\n  var bo = getBusinessObject(element);\n\n  return type && bo.get('eventDefinitions').some(function(definition) {\n    return is(definition, type);\n  });\n}\n\n/**\n * Compute intersection between two arrays.\n */\nfunction intersection(a1, a2) {\n  return a1.filter(function(el) {\n    return a2.indexOf(el) !== -1;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}