{"ast":null,"code":"import { getNewShapePosition } from './AutoPlaceUtil';\n/**\n * A service that places elements connected to existing ones\n * to an appropriate position in an _automated_ fashion.\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\n\nexport default function AutoPlace(eventBus, modeling) {\n  function emit(event, payload) {\n    return eventBus.fire(event, payload);\n  }\n  /**\n   * Append shape to source at appropriate position.\n   *\n   * @param {djs.model.Shape} source\n   * @param {djs.model.Shape} shape\n   *\n   * @return {djs.model.Shape} appended shape\n   */\n\n\n  this.append = function (source, shape) {\n    emit('autoPlace.start', {\n      source: source,\n      shape: shape\n    }); // allow others to provide the position\n\n    var position = emit('autoPlace', {\n      source: source,\n      shape: shape\n    });\n\n    if (!position) {\n      position = getNewShapePosition(source, shape);\n    }\n\n    var newShape = modeling.appendShape(source, shape, position, source.parent);\n    emit('autoPlace.end', {\n      source: source,\n      shape: newShape\n    });\n    return newShape;\n  };\n}\nAutoPlace.$inject = ['eventBus', 'modeling'];","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/auto-place/AutoPlace.js"],"names":["getNewShapePosition","AutoPlace","eventBus","modeling","emit","event","payload","fire","append","source","shape","position","newShape","appendShape","parent","$inject"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,iBAApC;AAGA;;;;;;;;AAOA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuC;AAEpD,WAASC,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8B;AAC5B,WAAOJ,QAAQ,CAACK,IAAT,CAAcF,KAAd,EAAqBC,OAArB,CAAP;AACD;AAGD;;;;;;;;;;AAQA,OAAKE,MAAL,GAAc,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AAEpCN,IAAAA,IAAI,CAAC,iBAAD,EAAoB;AACtBK,MAAAA,MAAM,EAAEA,MADc;AAEtBC,MAAAA,KAAK,EAAEA;AAFe,KAApB,CAAJ,CAFoC,CAOpC;;AACA,QAAIC,QAAQ,GAAGP,IAAI,CAAC,WAAD,EAAc;AAC/BK,MAAAA,MAAM,EAAEA,MADuB;AAE/BC,MAAAA,KAAK,EAAEA;AAFwB,KAAd,CAAnB;;AAKA,QAAI,CAACC,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGX,mBAAmB,CAACS,MAAD,EAASC,KAAT,CAA9B;AACD;;AAED,QAAIE,QAAQ,GAAGT,QAAQ,CAACU,WAAT,CAAqBJ,MAArB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8CF,MAAM,CAACK,MAArD,CAAf;AAEAV,IAAAA,IAAI,CAAC,eAAD,EAAkB;AACpBK,MAAAA,MAAM,EAAEA,MADY;AAEpBC,MAAAA,KAAK,EAAEE;AAFa,KAAlB,CAAJ;AAKA,WAAOA,QAAP;AACD,GAzBD;AA2BD;AAEDX,SAAS,CAACc,OAAV,GAAoB,CAClB,UADkB,EAElB,UAFkB,CAApB","sourcesContent":["import { getNewShapePosition } from './AutoPlaceUtil';\n\n\n/**\n * A service that places elements connected to existing ones\n * to an appropriate position in an _automated_ fashion.\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\nexport default function AutoPlace(eventBus, modeling) {\n\n  function emit(event, payload) {\n    return eventBus.fire(event, payload);\n  }\n\n\n  /**\n   * Append shape to source at appropriate position.\n   *\n   * @param {djs.model.Shape} source\n   * @param {djs.model.Shape} shape\n   *\n   * @return {djs.model.Shape} appended shape\n   */\n  this.append = function(source, shape) {\n\n    emit('autoPlace.start', {\n      source: source,\n      shape: shape\n    });\n\n    // allow others to provide the position\n    var position = emit('autoPlace', {\n      source: source,\n      shape: shape\n    });\n\n    if (!position) {\n      position = getNewShapePosition(source, shape);\n    }\n\n    var newShape = modeling.appendShape(source, shape, position, source.parent);\n\n    emit('autoPlace.end', {\n      source: source,\n      shape: newShape\n    });\n\n    return newShape;\n  };\n\n}\n\nAutoPlace.$inject = [\n  'eventBus',\n  'modeling'\n];"]},"metadata":{},"sourceType":"module"}