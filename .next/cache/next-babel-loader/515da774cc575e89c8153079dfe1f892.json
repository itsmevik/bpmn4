{"ast":null,"code":"import { find, forEach, isArray, isDefined, isObject, matchPattern, reduce, has, sortBy } from 'min-dash';\nvar DISALLOWED_PROPERTIES = ['artifacts', 'dataInputAssociations', 'dataOutputAssociations', 'default', 'flowElements', 'lanes', 'incoming', 'outgoing'];\n/**\n * @typedef {Function} <moddleCopy.canCopyProperties> listener\n *\n * @param {Object} context\n * @param {Array<string>} context.propertyNames\n * @param {ModdleElement} context.sourceElement\n * @param {ModdleElement} context.targetElement\n *\n * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canCopyProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {*|boolean} - Return copied property or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {boolean} - Return false to disallow\n * setting copied property.\n */\n\n/**\n * Utility for copying model properties from source element to target element.\n *\n * @param {EventBus} eventBus\n * @param {BpmnFactory} bpmnFactory\n * @param {BpmnModdle} moddle\n */\n\nexport default function ModdleCopy(eventBus, bpmnFactory, moddle) {\n  this._bpmnFactory = bpmnFactory;\n  this._eventBus = eventBus;\n  this._moddle = moddle; // copy extension elements last\n\n  eventBus.on('moddleCopy.canCopyProperties', function (context) {\n    var propertyNames = context.propertyNames;\n\n    if (!propertyNames || !propertyNames.length) {\n      return;\n    }\n\n    return sortBy(propertyNames, function (propertyName) {\n      return propertyName === 'extensionElements';\n    });\n  }); // default check whether property can be copied\n\n  eventBus.on('moddleCopy.canCopyProperty', function (context) {\n    var parent = context.parent,\n        parentDescriptor = isObject(parent) && parent.$descriptor,\n        propertyName = context.propertyName;\n\n    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {\n      // disallow copying property\n      return false;\n    }\n\n    if (propertyName && parentDescriptor && !find(parentDescriptor.properties, matchPattern({\n      name: propertyName\n    }))) {\n      // disallow copying property\n      return false;\n    }\n  }); // do NOT allow to copy empty extension elements\n\n  eventBus.on('moddleCopy.canSetCopiedProperty', function (context) {\n    var property = context.property;\n\n    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {\n      // disallow setting copied property\n      return false;\n    }\n  });\n}\nModdleCopy.$inject = ['eventBus', 'bpmnFactory', 'moddle'];\n/**\n * Copy model properties of source element to target element.\n *\n * @param {ModdleElement} sourceElement\n * @param {ModdleElement} targetElement\n * @param {Array<string>} [propertyNames]\n *\n * @param {ModdleElement}\n */\n\nModdleCopy.prototype.copyElement = function (sourceElement, targetElement, propertyNames) {\n  var self = this;\n\n  if (propertyNames && !isArray(propertyNames)) {\n    propertyNames = [propertyNames];\n  }\n\n  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);\n\n  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {\n    propertyNames: propertyNames,\n    sourceElement: sourceElement,\n    targetElement: targetElement\n  });\n\n  if (canCopyProperties === false) {\n    return targetElement;\n  }\n\n  if (isArray(canCopyProperties)) {\n    propertyNames = canCopyProperties;\n  } // copy properties\n\n\n  forEach(propertyNames, function (propertyName) {\n    var sourceProperty;\n\n    if (has(sourceElement, propertyName)) {\n      sourceProperty = sourceElement.get(propertyName);\n    }\n\n    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);\n\n    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {\n      parent: targetElement,\n      property: copiedProperty,\n      propertyName: propertyName\n    });\n\n    if (canSetProperty === false) {\n      return;\n    }\n\n    if (isDefined(copiedProperty)) {\n      targetElement.set(propertyName, copiedProperty);\n    }\n  });\n  return targetElement;\n};\n/**\n * Copy model property.\n *\n * @param {*} property\n * @param {ModdleElement} parent\n * @param {string} propertyName\n *\n * @returns {*}\n */\n\n\nModdleCopy.prototype.copyProperty = function (property, parent, propertyName) {\n  var self = this; // allow others to copy property\n\n  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {\n    parent: parent,\n    property: property,\n    propertyName: propertyName\n  }); // return if copying is NOT allowed\n\n\n  if (copiedProperty === false) {\n    return;\n  }\n\n  if (copiedProperty) {\n    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {\n      copiedProperty.$parent = parent;\n    }\n\n    return copiedProperty;\n  }\n\n  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName); // do NOT copy Ids and references\n\n\n  if (propertyDescriptor.isId || propertyDescriptor.isReference) {\n    return;\n  } // copy arrays\n\n\n  if (isArray(property)) {\n    return reduce(property, function (childProperties, childProperty) {\n      // recursion\n      copiedProperty = self.copyProperty(childProperty, parent, propertyName); // copying might NOT be allowed\n\n      if (copiedProperty) {\n        copiedProperty.$parent = parent;\n        return childProperties.concat(copiedProperty);\n      }\n\n      return childProperties;\n    }, []);\n  } // copy model elements\n\n\n  if (isObject(property) && property.$type) {\n    if (this._moddle.getElementDescriptor(property).isGeneric) {\n      return;\n    }\n\n    copiedProperty = self._bpmnFactory.create(property.$type);\n    copiedProperty.$parent = parent; // recursion\n\n    copiedProperty = self.copyElement(property, copiedProperty);\n    return copiedProperty;\n  } // copy primitive properties\n\n\n  return property;\n}; // helpers //////////\n\n\nexport function getPropertyNames(descriptor, keepDefaultProperties) {\n  return reduce(descriptor.properties, function (properties, property) {\n    if (keepDefaultProperties && property[\"default\"]) {\n      return properties;\n    }\n\n    return properties.concat(property.name);\n  }, []);\n}\n\nfunction is(element, type) {\n  return element && typeof element.$instanceOf === 'function' && element.$instanceOf(type);\n}","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/copy-paste/ModdleCopy.js"],"names":["find","forEach","isArray","isDefined","isObject","matchPattern","reduce","has","sortBy","DISALLOWED_PROPERTIES","ModdleCopy","eventBus","bpmnFactory","moddle","_bpmnFactory","_eventBus","_moddle","on","context","propertyNames","length","propertyName","parent","parentDescriptor","$descriptor","indexOf","properties","name","property","is","values","$inject","prototype","copyElement","sourceElement","targetElement","self","getPropertyNames","canCopyProperties","fire","sourceProperty","get","copiedProperty","copyProperty","canSetProperty","set","$type","$parent","propertyDescriptor","getPropertyDescriptor","isId","isReference","childProperties","childProperty","concat","getElementDescriptor","isGeneric","create","descriptor","keepDefaultProperties","element","type","$instanceOf"],"mappings":"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","sourcesContent":["import {\n  find,\n  forEach,\n  isArray,\n  isDefined,\n  isObject,\n  matchPattern,\n  reduce,\n  has,\n  sortBy\n} from 'min-dash';\n\nvar DISALLOWED_PROPERTIES = [\n  'artifacts',\n  'dataInputAssociations',\n  'dataOutputAssociations',\n  'default',\n  'flowElements',\n  'lanes',\n  'incoming',\n  'outgoing'\n];\n\n/**\n * @typedef {Function} <moddleCopy.canCopyProperties> listener\n *\n * @param {Object} context\n * @param {Array<string>} context.propertyNames\n * @param {ModdleElement} context.sourceElement\n * @param {ModdleElement} context.targetElement\n *\n * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canCopyProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {*|boolean} - Return copied property or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {boolean} - Return false to disallow\n * setting copied property.\n */\n\n/**\n * Utility for copying model properties from source element to target element.\n *\n * @param {EventBus} eventBus\n * @param {BpmnFactory} bpmnFactory\n * @param {BpmnModdle} moddle\n */\nexport default function ModdleCopy(eventBus, bpmnFactory, moddle) {\n  this._bpmnFactory = bpmnFactory;\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n\n  // copy extension elements last\n  eventBus.on('moddleCopy.canCopyProperties', function(context) {\n    var propertyNames = context.propertyNames;\n\n    if (!propertyNames || !propertyNames.length) {\n      return;\n    }\n\n    return sortBy(propertyNames, function(propertyName) {\n      return propertyName === 'extensionElements';\n    });\n  });\n\n  // default check whether property can be copied\n  eventBus.on('moddleCopy.canCopyProperty', function(context) {\n    var parent = context.parent,\n        parentDescriptor = isObject(parent) && parent.$descriptor,\n        propertyName = context.propertyName;\n\n    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {\n\n      // disallow copying property\n      return false;\n    }\n\n    if (propertyName &&\n      parentDescriptor &&\n      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {\n\n      // disallow copying property\n      return false;\n    }\n  });\n\n  // do NOT allow to copy empty extension elements\n  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {\n    var property = context.property;\n\n    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {\n\n      // disallow setting copied property\n      return false;\n    }\n  });\n}\n\nModdleCopy.$inject = [\n  'eventBus',\n  'bpmnFactory',\n  'moddle'\n];\n\n/**\n * Copy model properties of source element to target element.\n *\n * @param {ModdleElement} sourceElement\n * @param {ModdleElement} targetElement\n * @param {Array<string>} [propertyNames]\n *\n * @param {ModdleElement}\n */\nModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {\n  var self = this;\n\n  if (propertyNames && !isArray(propertyNames)) {\n    propertyNames = [ propertyNames ];\n  }\n\n  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);\n\n  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {\n    propertyNames: propertyNames,\n    sourceElement: sourceElement,\n    targetElement: targetElement\n  });\n\n  if (canCopyProperties === false) {\n    return targetElement;\n  }\n\n  if (isArray(canCopyProperties)) {\n    propertyNames = canCopyProperties;\n  }\n\n  // copy properties\n  forEach(propertyNames, function(propertyName) {\n    var sourceProperty;\n\n    if (has(sourceElement, propertyName)) {\n      sourceProperty = sourceElement.get(propertyName);\n    }\n\n    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);\n\n    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {\n      parent: targetElement,\n      property: copiedProperty,\n      propertyName: propertyName\n    });\n\n    if (canSetProperty === false) {\n      return;\n    }\n\n    if (isDefined(copiedProperty)) {\n      targetElement.set(propertyName, copiedProperty);\n    }\n  });\n\n  return targetElement;\n};\n\n/**\n * Copy model property.\n *\n * @param {*} property\n * @param {ModdleElement} parent\n * @param {string} propertyName\n *\n * @returns {*}\n */\nModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {\n  var self = this;\n\n  // allow others to copy property\n  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {\n    parent: parent,\n    property: property,\n    propertyName: propertyName\n  });\n\n  // return if copying is NOT allowed\n  if (copiedProperty === false) {\n    return;\n  }\n\n  if (copiedProperty) {\n    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {\n      copiedProperty.$parent = parent;\n    }\n\n    return copiedProperty;\n  }\n\n  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);\n\n  // do NOT copy Ids and references\n  if (propertyDescriptor.isId || propertyDescriptor.isReference) {\n    return;\n  }\n\n  // copy arrays\n  if (isArray(property)) {\n    return reduce(property, function(childProperties, childProperty) {\n\n      // recursion\n      copiedProperty = self.copyProperty(childProperty, parent, propertyName);\n\n      // copying might NOT be allowed\n      if (copiedProperty) {\n        copiedProperty.$parent = parent;\n\n        return childProperties.concat(copiedProperty);\n      }\n\n      return childProperties;\n    }, []);\n  }\n\n  // copy model elements\n  if (isObject(property) && property.$type) {\n    if (this._moddle.getElementDescriptor(property).isGeneric) {\n      return;\n    }\n\n    copiedProperty = self._bpmnFactory.create(property.$type);\n\n    copiedProperty.$parent = parent;\n\n    // recursion\n    copiedProperty = self.copyElement(property, copiedProperty);\n\n    return copiedProperty;\n  }\n\n  // copy primitive properties\n  return property;\n};\n\n// helpers //////////\n\nexport function getPropertyNames(descriptor, keepDefaultProperties) {\n  return reduce(descriptor.properties, function(properties, property) {\n\n    if (keepDefaultProperties && property.default) {\n      return properties;\n    }\n\n    return properties.concat(property.name);\n  }, []);\n}\n\nfunction is(element, type) {\n  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);\n}"]},"metadata":{},"sourceType":"module"}