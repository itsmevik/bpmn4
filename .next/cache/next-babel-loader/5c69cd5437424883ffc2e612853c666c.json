{"ast":null,"code":"import { getBusinessObject, is } from '../../util/ModelUtil';\nimport { forEach, isArray, isUndefined, omit, reduce } from 'min-dash';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nfunction removeProperties(element, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n\n  forEach(properties, function (property) {\n    if (element[property]) {\n      delete element[property];\n    }\n  });\n}\n\nvar LOW_PRIORITY = 750;\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n    descriptor.type = element.type;\n    copyProperties(businessObject, descriptor, 'name');\n    descriptor.di = {}; // fill and stroke will be set to DI\n\n    copyProperties(businessObject.di, descriptor.di, ['fill', 'stroke']);\n    copyProperties(businessObject.di, descriptor, 'isExpanded');\n\n    if (isLabel(descriptor)) {\n      return descriptor;\n    } // default sequence flow\n\n\n    if (businessObject[\"default\"]) {\n      descriptor[\"default\"] = businessObject[\"default\"].id;\n    }\n  });\n  eventBus.on('moddleCopy.canCopyProperty', function (context) {\n    var parent = context.parent,\n        property = context.property,\n        propertyName = context.propertyName,\n        bpmnProcess;\n\n    if (propertyName === 'processRef' && is(parent, 'bpmn:Participant') && is(property, 'bpmn:Process')) {\n      bpmnProcess = bpmnFactory.create('bpmn:Process'); // return copy of process\n\n      return moddleCopy.copyElement(property, bpmnProcess);\n    }\n  });\n  var references;\n\n  function resolveReferences(descriptor, cache) {\n    var businessObject = getBusinessObject(descriptor); // default sequence flows\n\n    if (descriptor[\"default\"]) {\n      // relationship cannot be resolved immediately\n      references[descriptor[\"default\"]] = {\n        element: businessObject,\n        property: 'default'\n      };\n    } // boundary events\n\n\n    if (descriptor.host) {\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[descriptor.host]);\n    }\n\n    references = omit(references, reduce(references, function (array, reference, key) {\n      var element = reference.element,\n          property = reference.property;\n\n      if (key === descriptor.id) {\n        element[property] = businessObject;\n        array.push(descriptor.id);\n      }\n\n      return array;\n    }, []));\n  }\n\n  eventBus.on('copyPaste.pasteElements', function () {\n    references = {};\n  });\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var cache = context.cache,\n        descriptor = context.descriptor,\n        oldBusinessObject = descriptor.oldBusinessObject,\n        newBusinessObject; // do NOT copy business object if external label\n\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[descriptor.labelTarget]);\n      return;\n    }\n\n    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n    descriptor.businessObject = moddleCopy.copyElement(oldBusinessObject, newBusinessObject); // resolve references e.g. default sequence flow\n\n    resolveReferences(descriptor, cache);\n    copyProperties(descriptor, newBusinessObject, ['isExpanded', 'name']);\n    removeProperties(descriptor, 'oldBusinessObject');\n  });\n}\nBpmnCopyPaste.$inject = ['bpmnFactory', 'eventBus', 'moddleCopy']; // helpers //////////\n\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/copy-paste/BpmnCopyPaste.js"],"names":["getBusinessObject","is","forEach","isArray","isUndefined","omit","reduce","copyProperties","source","target","properties","property","removeProperties","element","LOW_PRIORITY","BpmnCopyPaste","bpmnFactory","eventBus","moddleCopy","on","context","descriptor","businessObject","oldBusinessObject","type","di","isLabel","id","parent","propertyName","bpmnProcess","create","copyElement","references","resolveReferences","cache","host","attachedToRef","array","reference","key","push","newBusinessObject","labelTarget","$type","$inject"],"mappings":"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","sourcesContent":["import {\n  getBusinessObject,\n  is\n} from '../../util/ModelUtil';\n\nimport {\n  forEach,\n  isArray,\n  isUndefined,\n  omit,\n  reduce\n} from 'min-dash';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nfunction removeProperties(element, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (element[property]) {\n      delete element[property];\n    }\n  });\n}\n\nvar LOW_PRIORITY = 750;\n\n\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n\n    descriptor.type = element.type;\n\n    copyProperties(businessObject, descriptor, 'name');\n\n    descriptor.di = {};\n\n    // fill and stroke will be set to DI\n    copyProperties(businessObject.di, descriptor.di, [\n      'fill',\n      'stroke'\n    ]);\n\n    copyProperties(businessObject.di, descriptor, 'isExpanded');\n\n    if (isLabel(descriptor)) {\n      return descriptor;\n    }\n\n    // default sequence flow\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n\n  eventBus.on('moddleCopy.canCopyProperty', function(context) {\n    var parent = context.parent,\n        property = context.property,\n        propertyName = context.propertyName,\n        bpmnProcess;\n\n    if (\n      propertyName === 'processRef' &&\n      is(parent, 'bpmn:Participant') &&\n      is(property, 'bpmn:Process')\n    ) {\n      bpmnProcess = bpmnFactory.create('bpmn:Process');\n\n      // return copy of process\n      return moddleCopy.copyElement(property, bpmnProcess);\n    }\n  });\n\n  var references;\n\n  function resolveReferences(descriptor, cache) {\n    var businessObject = getBusinessObject(descriptor);\n\n    // default sequence flows\n    if (descriptor.default) {\n\n      // relationship cannot be resolved immediately\n      references[ descriptor.default ] = {\n        element: businessObject,\n        property: 'default'\n      };\n    }\n\n    // boundary events\n    if (descriptor.host) {\n\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);\n    }\n\n    references = omit(references, reduce(references, function(array, reference, key) {\n      var element = reference.element,\n          property = reference.property;\n\n      if (key === descriptor.id) {\n        element[ property ] = businessObject;\n\n        array.push(descriptor.id);\n      }\n\n      return array;\n    }, []));\n  }\n\n  eventBus.on('copyPaste.pasteElements', function() {\n    references = {};\n  });\n\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var cache = context.cache,\n        descriptor = context.descriptor,\n        oldBusinessObject = descriptor.oldBusinessObject,\n        newBusinessObject;\n\n    // do NOT copy business object if external label\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);\n\n      return;\n    }\n\n    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n\n    descriptor.businessObject = moddleCopy.copyElement(\n      oldBusinessObject,\n      newBusinessObject\n    );\n\n    // resolve references e.g. default sequence flow\n    resolveReferences(descriptor, cache);\n\n    copyProperties(descriptor, newBusinessObject, [\n      'isExpanded',\n      'name'\n    ]);\n\n    removeProperties(descriptor, 'oldBusinessObject');\n  });\n\n}\n\n\nBpmnCopyPaste.$inject = [\n  'bpmnFactory',\n  'eventBus',\n  'moddleCopy'\n];\n\n// helpers //////////\n\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}\n"]},"metadata":{},"sourceType":"module"}