{"ast":null,"code":"import AutoResize from 'diagram-js/lib/features/auto-resize/AutoResize';\nimport inherits from 'inherits';\nimport { is } from '../../util/ModelUtil';\n/**\n * Sub class of the AutoResize module which implements a BPMN\n * specific resize function.\n */\n\nexport default function BpmnAutoResize(injector) {\n  injector.invoke(AutoResize, this);\n}\nBpmnAutoResize.$inject = ['injector'];\ninherits(BpmnAutoResize, AutoResize);\n/**\n * Resize shapes and lanes.\n *\n * @param {djs.model.Shape} target\n * @param {Bounds} newBounds\n * @param {Object} hints\n */\n\nBpmnAutoResize.prototype.resize = function (target, newBounds, hints) {\n  if (is(target, 'bpmn:Participant')) {\n    this._modeling.resizeLane(target, newBounds, null, hints);\n  } else {\n    this._modeling.resizeShape(target, newBounds, null, hints);\n  }\n};","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/auto-resize/BpmnAutoResize.js"],"names":["AutoResize","inherits","is","BpmnAutoResize","injector","invoke","$inject","prototype","resize","target","newBounds","hints","_modeling","resizeLane","resizeShape"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,gDAAvB;AAEA,OAAOC,QAAP,MAAqB,UAArB;AAEA,SAASC,EAAT,QAAmB,sBAAnB;AAGA;;;;;AAIA,eAAe,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAE/CA,EAAAA,QAAQ,CAACC,MAAT,CAAgBL,UAAhB,EAA4B,IAA5B;AACD;AAEDG,cAAc,CAACG,OAAf,GAAyB,CACvB,UADuB,CAAzB;AAIAL,QAAQ,CAACE,cAAD,EAAiBH,UAAjB,CAAR;AAGA;;;;;;;;AAOAG,cAAc,CAACI,SAAf,CAAyBC,MAAzB,GAAkC,UAASC,MAAT,EAAiBC,SAAjB,EAA4BC,KAA5B,EAAmC;AAEnE,MAAIT,EAAE,CAACO,MAAD,EAAS,kBAAT,CAAN,EAAoC;AAClC,SAAKG,SAAL,CAAeC,UAAf,CAA0BJ,MAA1B,EAAkCC,SAAlC,EAA6C,IAA7C,EAAmDC,KAAnD;AACD,GAFD,MAEO;AACL,SAAKC,SAAL,CAAeE,WAAf,CAA2BL,MAA3B,EAAmCC,SAAnC,EAA8C,IAA9C,EAAoDC,KAApD;AACD;AACF,CAPD","sourcesContent":["import AutoResize from 'diagram-js/lib/features/auto-resize/AutoResize';\n\nimport inherits from 'inherits';\n\nimport { is } from '../../util/ModelUtil';\n\n\n/**\n * Sub class of the AutoResize module which implements a BPMN\n * specific resize function.\n */\nexport default function BpmnAutoResize(injector) {\n\n  injector.invoke(AutoResize, this);\n}\n\nBpmnAutoResize.$inject = [\n  'injector'\n];\n\ninherits(BpmnAutoResize, AutoResize);\n\n\n/**\n * Resize shapes and lanes.\n *\n * @param {djs.model.Shape} target\n * @param {Bounds} newBounds\n * @param {Object} hints\n */\nBpmnAutoResize.prototype.resize = function(target, newBounds, hints) {\n\n  if (is(target, 'bpmn:Participant')) {\n    this._modeling.resizeLane(target, newBounds, null, hints);\n  } else {\n    this._modeling.resizeShape(target, newBounds, null, hints);\n  }\n};"]},"metadata":{},"sourceType":"module"}