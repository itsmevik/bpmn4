{"ast":null,"code":"/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport { assign, find, isFunction, isNumber, omit } from 'min-dash';\nimport { domify, query as domQuery, remove as domRemove } from 'min-dom';\nimport { innerSVG } from 'tiny-svg';\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\nimport inherits from 'inherits';\nimport { importBpmnDiagram } from './import/Importer';\n/**\n * A base viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Viewer}, {@link NavigatedViewer} or {@link Modeler} for\n * bundles that include actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\n\nexport default function BaseViewer(options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  this._moddle = this._createModdle(options);\n  this._container = this._createContainer(options);\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n  /* </project-logo> */\n\n  this._init(this._container, this._moddle, options);\n}\ninherits(BaseViewer, Diagram);\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from xml)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String} xml the BPMN 2.0 xml\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\nBaseViewer.prototype.importXML = function (xml, bpmnDiagram, done) {\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  } // done is optional\n\n\n  done = done || function () {};\n\n  var self = this; // hook in pre-parse listeners +\n  // allow xml manipulation\n\n  xml = this._emit('import.parse.start', {\n    xml: xml\n  }) || xml;\n\n  this._moddle.fromXML(xml, 'bpmn:Definitions', function (err, definitions, context) {\n    // hook in post parse listeners +\n    // allow definitions manipulation\n    definitions = self._emit('import.parse.complete', {\n      error: err,\n      definitions: definitions,\n      context: context\n    }) || definitions;\n    var parseWarnings = context.warnings;\n\n    if (err) {\n      err = checkValidationError(err);\n\n      self._emit('import.done', {\n        error: err,\n        warnings: parseWarnings\n      });\n\n      return done(err, parseWarnings);\n    }\n\n    self.importDefinitions(definitions, bpmnDiagram, function (err, importWarnings) {\n      var allWarnings = [].concat(parseWarnings, importWarnings || []);\n\n      self._emit('import.done', {\n        error: err,\n        warnings: allWarnings\n      });\n\n      done(err, allWarnings);\n    });\n  });\n};\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\n\nBaseViewer.prototype.importDefinitions = function (definitions, bpmnDiagram, done) {\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  } // done is optional\n\n\n  done = done || function () {};\n\n  this._setDefinitions(definitions);\n\n  return this.open(bpmnDiagram, done);\n};\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open\n * @param {Function} [done] invoked with (err, warnings=[])\n */\n\n\nBaseViewer.prototype.open = function (bpmnDiagramOrId, done) {\n  if (isFunction(bpmnDiagramOrId)) {\n    done = bpmnDiagramOrId;\n    bpmnDiagramOrId = null;\n  }\n\n  var definitions = this._definitions;\n  var bpmnDiagram = bpmnDiagramOrId; // done is optional\n\n  done = done || function () {};\n\n  if (!definitions) {\n    return done(new Error('no XML imported'));\n  }\n\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n    if (!bpmnDiagram) {\n      return done(new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found'));\n    }\n  } // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n\n\n  try {\n    this.clear();\n  } catch (error) {\n    return done(error);\n  } // perform graphical import\n\n\n  return importBpmnDiagram(this, definitions, bpmnDiagram, done);\n};\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options] export options\n * @param {Boolean} [options.format=false] output formatted XML\n * @param {Boolean} [options.preamble=true] output preamble\n *\n * @param {Function} done invoked with (err, xml)\n */\n\n\nBaseViewer.prototype.saveXML = function (options, done) {\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  var self = this;\n  var definitions = this._definitions;\n\n  if (!definitions) {\n    return done(new Error('no definitions loaded'));\n  } // allow to fiddle around with definitions\n\n\n  definitions = this._emit('saveXML.start', {\n    definitions: definitions\n  }) || definitions;\n\n  this._moddle.toXML(definitions, options, function (err, xml) {\n    try {\n      xml = self._emit('saveXML.serialized', {\n        error: err,\n        xml: xml\n      }) || xml;\n\n      self._emit('saveXML.done', {\n        error: err,\n        xml: xml\n      });\n    } catch (e) {\n      console.error('error in saveXML life-cycle listener', e);\n    }\n\n    done(err, xml);\n  });\n};\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options]\n * @param {Function} done invoked with (err, svgStr)\n */\n\n\nBaseViewer.prototype.saveSVG = function (options, done) {\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  this._emit('saveSVG.start');\n\n  var svg, err;\n\n  try {\n    var canvas = this.get('canvas');\n    var contentNode = canvas.getDefaultLayer(),\n        defsNode = domQuery('defs', canvas._svg);\n    var contents = innerSVG(contentNode),\n        defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n    var bbox = contentNode.getBBox();\n    svg = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + '<!-- created with bpmn-js / http://bpmn.io -->\\n' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' + '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' + 'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' + defs + contents + '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n\n  done(err, svg);\n};\n/**\n * Get a named diagram service.\n *\n * @example\n *\n * var elementRegistry = viewer.get('elementRegistry');\n * var startEventShape = elementRegistry.get('StartEvent_1');\n *\n * @param {String} name\n *\n * @return {Object} diagram service instance\n *\n * @method BaseViewer#get\n */\n\n/**\n * Invoke a function in the context of this viewer.\n *\n * @example\n *\n * viewer.invoke(function(elementRegistry) {\n *   var startEventShape = elementRegistry.get('StartEvent_1');\n * });\n *\n * @param {Function} fn to be invoked\n *\n * @return {Object} the functions return value\n *\n * @method BaseViewer#invoke\n */\n\n\nBaseViewer.prototype._setDefinitions = function (definitions) {\n  this._definitions = definitions;\n};\n\nBaseViewer.prototype.getModules = function () {\n  return this._modules;\n};\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still\n * be reused for opening another diagram.\n *\n * @method BaseViewer#clear\n */\n\n\nBaseViewer.prototype.clear = function () {\n  if (!this.getDefinitions()) {\n    // no diagram to clear\n    return;\n  } // remove businessObject#di binding\n  //\n  // this is necessary, as we establish the bindings\n  // in the BpmnTreeWalker (and assume none are given\n  // on reimport)\n\n\n  this.get('elementRegistry').forEach(function (element) {\n    var bo = element.businessObject;\n\n    if (bo && bo.di) {\n      delete bo.di;\n    }\n  }); // remove drawn elements\n\n  Diagram.prototype.clear.call(this);\n};\n/**\n * Destroy the viewer instance and remove all its\n * remainders from the document tree.\n */\n\n\nBaseViewer.prototype.destroy = function () {\n  // diagram destroy\n  Diagram.prototype.destroy.call(this); // dom detach\n\n  domRemove(this._container);\n};\n/**\n * Register an event listener\n *\n * Remove a previously added listener via {@link #off(event, callback)}.\n *\n * @param {String} event\n * @param {Number} [priority]\n * @param {Function} callback\n * @param {Object} [that]\n */\n\n\nBaseViewer.prototype.on = function (event, priority, callback, target) {\n  return this.get('eventBus').on(event, priority, callback, target);\n};\n/**\n * De-register an event listener\n *\n * @param {String} event\n * @param {Function} callback\n */\n\n\nBaseViewer.prototype.off = function (event, callback) {\n  this.get('eventBus').off(event, callback);\n};\n\nBaseViewer.prototype.attachTo = function (parentNode) {\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  } // ensure we detach from the\n  // previous, old parent\n\n\n  this.detach(); // unwrap jQuery if provided\n\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  parentNode.appendChild(this._container);\n\n  this._emit('attach', {});\n\n  this.get('canvas').resized();\n};\n\nBaseViewer.prototype.getDefinitions = function () {\n  return this._definitions;\n};\n\nBaseViewer.prototype.detach = function () {\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach', {});\n\n  parentNode.removeChild(container);\n};\n\nBaseViewer.prototype._init = function (container, moddle, options) {\n  var baseModules = options.modules || this.getModules(),\n      additionalModules = options.additionalModules || [],\n      staticModules = [{\n    bpmnjs: ['value', this],\n    moddle: ['value', moddle]\n  }];\n  var diagramModules = [].concat(staticModules, baseModules, additionalModules);\n  var diagramOptions = assign(omit(options, ['additionalModules']), {\n    canvas: assign({}, options.canvas, {\n      container: container\n    }),\n    modules: diagramModules\n  }); // invoke diagram constructor\n\n  Diagram.call(this, diagramOptions);\n\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {String} type\n * @param  {Object} event\n *\n * @return {Object} event processing result (if any)\n */\n\n\nBaseViewer.prototype._emit = function (type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\nBaseViewer.prototype._createContainer = function (options) {\n  var container = domify('<div class=\"bjs-container\"></div>');\n  assign(container.style, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n  return container;\n};\n\nBaseViewer.prototype._createModdle = function (options) {\n  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n  return new BpmnModdle(moddleOptions);\n};\n\nBaseViewer.prototype._modules = []; // helpers ///////////////\n\nfunction checkValidationError(err) {\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n  var pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  var match = pattern.exec(err.message);\n\n  if (match) {\n    err.message = 'unparsable content <' + match[1] + '> detected; ' + 'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n\n  return err;\n}\n\nvar DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\n\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {String} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\n\n\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n\n  return find(definitions.diagrams, function (element) {\n    return element.id === diagramId;\n  }) || null;\n}\n/* <project-logo> */\n\n\nimport { open as openPoweredBy, BPMNIO_IMG } from './util/PoweredByUtil';\nimport { event as domEvent } from 'min-dom';\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\n\nfunction addProjectLogo(container) {\n  var img = BPMNIO_IMG;\n  var linkMarkup = '<a href=\"http://bpmn.io\" ' + 'target=\"_blank\" ' + 'class=\"bjs-powered-by\" ' + 'title=\"Powered by bpmn.io\" ' + 'style=\"position: absolute; bottom: 15px; right: 15px; z-index: 100\">' + img + '</a>';\n  var linkElement = domify(linkMarkup);\n  container.appendChild(linkElement);\n  domEvent.bind(linkElement, 'click', function (event) {\n    openPoweredBy();\n    event.preventDefault();\n  });\n}\n/* </project-logo> */","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/BaseViewer.js"],"names":["assign","find","isFunction","isNumber","omit","domify","query","domQuery","remove","domRemove","innerSVG","Diagram","BpmnModdle","inherits","importBpmnDiagram","BaseViewer","options","DEFAULT_OPTIONS","_moddle","_createModdle","_container","_createContainer","addProjectLogo","_init","prototype","importXML","xml","bpmnDiagram","done","self","_emit","fromXML","err","definitions","context","error","parseWarnings","warnings","checkValidationError","importDefinitions","importWarnings","allWarnings","concat","_setDefinitions","open","bpmnDiagramOrId","_definitions","Error","findBPMNDiagram","clear","saveXML","toXML","e","console","saveSVG","svg","canvas","get","contentNode","getDefaultLayer","defsNode","_svg","contents","defs","bbox","getBBox","width","height","x","y","getModules","_modules","getDefinitions","forEach","element","bo","businessObject","di","call","destroy","on","event","priority","callback","target","off","attachTo","parentNode","detach","constructor","jquery","appendChild","resized","container","removeChild","moddle","baseModules","modules","additionalModules","staticModules","bpmnjs","diagramModules","diagramOptions","type","fire","style","ensureUnit","position","moddleOptions","_moddleExtensions","moddleExtensions","pattern","match","exec","message","val","diagramId","diagrams","id","openPoweredBy","BPMNIO_IMG","domEvent","img","linkMarkup","linkElement","bind","preventDefault"],"mappings":"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","sourcesContent":["/**\n * The code in the <project-logo></project-logo> area\n * must not be changed.\n *\n * @see http://bpmn.io/license for more information.\n */\nimport {\n  assign,\n  find,\n  isFunction,\n  isNumber,\n  omit\n} from 'min-dash';\n\nimport {\n  domify,\n  query as domQuery,\n  remove as domRemove\n} from 'min-dom';\n\nimport {\n  innerSVG\n} from 'tiny-svg';\n\nimport Diagram from 'diagram-js';\nimport BpmnModdle from 'bpmn-moddle';\n\nimport inherits from 'inherits';\n\nimport {\n  importBpmnDiagram\n} from './import/Importer';\n\n\n/**\n * A base viewer for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Viewer}, {@link NavigatedViewer} or {@link Modeler} for\n * bundles that include actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {String|Number} [options.width] the width of the viewer\n * @param {String|Number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\nexport default function BaseViewer(options) {\n\n  options = assign({}, DEFAULT_OPTIONS, options);\n\n  this._moddle = this._createModdle(options);\n\n  this._container = this._createContainer(options);\n\n  /* <project-logo> */\n\n  addProjectLogo(this._container);\n\n  /* </project-logo> */\n\n  this._init(this._container, this._moddle, options);\n}\n\ninherits(BaseViewer, Diagram);\n\n\n/**\n * Parse and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.parse.start (about to read model from xml)\n *   * import.parse.complete (model read; may have worked or not)\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *   * import.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String} xml the BPMN 2.0 xml\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nBaseViewer.prototype.importXML = function(xml, bpmnDiagram, done) {\n\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  }\n\n  // done is optional\n  done = done || function() {};\n\n  var self = this;\n\n  // hook in pre-parse listeners +\n  // allow xml manipulation\n  xml = this._emit('import.parse.start', { xml: xml }) || xml;\n\n  this._moddle.fromXML(xml, 'bpmn:Definitions', function(err, definitions, context) {\n\n    // hook in post parse listeners +\n    // allow definitions manipulation\n    definitions = self._emit('import.parse.complete', {\n      error: err,\n      definitions: definitions,\n      context: context\n    }) || definitions;\n\n    var parseWarnings = context.warnings;\n\n    if (err) {\n      err = checkValidationError(err);\n\n      self._emit('import.done', { error: err, warnings: parseWarnings });\n\n      return done(err, parseWarnings);\n    }\n\n    self.importDefinitions(definitions, bpmnDiagram, function(err, importWarnings) {\n      var allWarnings = [].concat(parseWarnings, importWarnings || []);\n\n      self._emit('import.done', { error: err, warnings: allWarnings });\n\n      done(err, allWarnings);\n    });\n  });\n};\n\n/**\n * Import parsed definitions and render a BPMN 2.0 diagram.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During import the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions\n * @param {ModdleElement<BPMNDiagram>|String} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nBaseViewer.prototype.importDefinitions = function(definitions, bpmnDiagram, done) {\n\n  if (isFunction(bpmnDiagram)) {\n    done = bpmnDiagram;\n    bpmnDiagram = null;\n  }\n\n  // done is optional\n  done = done || function() {};\n\n  this._setDefinitions(definitions);\n\n  return this.open(bpmnDiagram, done);\n};\n\n/**\n * Open diagram of previously imported XML.\n *\n * Once finished the viewer reports back the result to the\n * provided callback function with (err, warnings).\n *\n * ## Life-Cycle Events\n *\n * During switch the viewer will fire life-cycle events:\n *\n *   * import.render.start (graphical import start)\n *   * import.render.complete (graphical import finished)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {String|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open\n * @param {Function} [done] invoked with (err, warnings=[])\n */\nBaseViewer.prototype.open = function(bpmnDiagramOrId, done) {\n\n  if (isFunction(bpmnDiagramOrId)) {\n    done = bpmnDiagramOrId;\n    bpmnDiagramOrId = null;\n  }\n\n  var definitions = this._definitions;\n  var bpmnDiagram = bpmnDiagramOrId;\n\n  // done is optional\n  done = done || function() {};\n\n  if (!definitions) {\n    return done(new Error('no XML imported'));\n  }\n\n  if (typeof bpmnDiagramOrId === 'string') {\n    bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);\n\n    if (!bpmnDiagram) {\n      return done(new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found'));\n    }\n  }\n\n  // clear existing rendered diagram\n  // catch synchronous exceptions during #clear()\n  try {\n    this.clear();\n  } catch (error) {\n    return done(error);\n  }\n\n  // perform graphical import\n  return importBpmnDiagram(this, definitions, bpmnDiagram, done);\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * a BPMN 2.0 XML document.\n *\n * ## Life-Cycle Events\n *\n * During XML saving the viewer will fire life-cycle events:\n *\n *   * saveXML.start (before serialization)\n *   * saveXML.serialized (after xml generation)\n *   * saveXML.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options] export options\n * @param {Boolean} [options.format=false] output formatted XML\n * @param {Boolean} [options.preamble=true] output preamble\n *\n * @param {Function} done invoked with (err, xml)\n */\nBaseViewer.prototype.saveXML = function(options, done) {\n\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  var self = this;\n\n  var definitions = this._definitions;\n\n  if (!definitions) {\n    return done(new Error('no definitions loaded'));\n  }\n\n  // allow to fiddle around with definitions\n  definitions = this._emit('saveXML.start', {\n    definitions: definitions\n  }) || definitions;\n\n  this._moddle.toXML(definitions, options, function(err, xml) {\n\n    try {\n      xml = self._emit('saveXML.serialized', {\n        error: err,\n        xml: xml\n      }) || xml;\n\n      self._emit('saveXML.done', {\n        error: err,\n        xml: xml\n      });\n    } catch (e) {\n      console.error('error in saveXML life-cycle listener', e);\n    }\n\n    done(err, xml);\n  });\n};\n\n/**\n * Export the currently displayed BPMN 2.0 diagram as\n * an SVG image.\n *\n * ## Life-Cycle Events\n *\n * During SVG saving the viewer will fire life-cycle events:\n *\n *   * saveSVG.start (before serialization)\n *   * saveSVG.done (everything done)\n *\n * You can use these events to hook into the life-cycle.\n *\n * @param {Object} [options]\n * @param {Function} done invoked with (err, svgStr)\n */\nBaseViewer.prototype.saveSVG = function(options, done) {\n\n  if (!done) {\n    done = options;\n    options = {};\n  }\n\n  this._emit('saveSVG.start');\n\n  var svg, err;\n\n  try {\n    var canvas = this.get('canvas');\n\n    var contentNode = canvas.getDefaultLayer(),\n        defsNode = domQuery('defs', canvas._svg);\n\n    var contents = innerSVG(contentNode),\n        defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';\n\n    var bbox = contentNode.getBBox();\n\n    svg =\n      '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n      '<!-- created with bpmn-js / http://bpmn.io -->\\n' +\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n' +\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' +\n           'width=\"' + bbox.width + '\" height=\"' + bbox.height + '\" ' +\n           'viewBox=\"' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '\" version=\"1.1\">' +\n        defs + contents +\n      '</svg>';\n  } catch (e) {\n    err = e;\n  }\n\n  this._emit('saveSVG.done', {\n    error: err,\n    svg: svg\n  });\n\n  done(err, svg);\n};\n\n/**\n * Get a named diagram service.\n *\n * @example\n *\n * var elementRegistry = viewer.get('elementRegistry');\n * var startEventShape = elementRegistry.get('StartEvent_1');\n *\n * @param {String} name\n *\n * @return {Object} diagram service instance\n *\n * @method BaseViewer#get\n */\n\n/**\n * Invoke a function in the context of this viewer.\n *\n * @example\n *\n * viewer.invoke(function(elementRegistry) {\n *   var startEventShape = elementRegistry.get('StartEvent_1');\n * });\n *\n * @param {Function} fn to be invoked\n *\n * @return {Object} the functions return value\n *\n * @method BaseViewer#invoke\n */\n\n\nBaseViewer.prototype._setDefinitions = function(definitions) {\n  this._definitions = definitions;\n};\n\nBaseViewer.prototype.getModules = function() {\n  return this._modules;\n};\n\n/**\n * Remove all drawn elements from the viewer.\n *\n * After calling this method the viewer can still\n * be reused for opening another diagram.\n *\n * @method BaseViewer#clear\n */\nBaseViewer.prototype.clear = function() {\n  if (!this.getDefinitions()) {\n\n    // no diagram to clear\n    return;\n  }\n\n  // remove businessObject#di binding\n  //\n  // this is necessary, as we establish the bindings\n  // in the BpmnTreeWalker (and assume none are given\n  // on reimport)\n  this.get('elementRegistry').forEach(function(element) {\n    var bo = element.businessObject;\n\n    if (bo && bo.di) {\n      delete bo.di;\n    }\n  });\n\n  // remove drawn elements\n  Diagram.prototype.clear.call(this);\n};\n\n/**\n * Destroy the viewer instance and remove all its\n * remainders from the document tree.\n */\nBaseViewer.prototype.destroy = function() {\n\n  // diagram destroy\n  Diagram.prototype.destroy.call(this);\n\n  // dom detach\n  domRemove(this._container);\n};\n\n/**\n * Register an event listener\n *\n * Remove a previously added listener via {@link #off(event, callback)}.\n *\n * @param {String} event\n * @param {Number} [priority]\n * @param {Function} callback\n * @param {Object} [that]\n */\nBaseViewer.prototype.on = function(event, priority, callback, target) {\n  return this.get('eventBus').on(event, priority, callback, target);\n};\n\n/**\n * De-register an event listener\n *\n * @param {String} event\n * @param {Function} callback\n */\nBaseViewer.prototype.off = function(event, callback) {\n  this.get('eventBus').off(event, callback);\n};\n\nBaseViewer.prototype.attachTo = function(parentNode) {\n\n  if (!parentNode) {\n    throw new Error('parentNode required');\n  }\n\n  // ensure we detach from the\n  // previous, old parent\n  this.detach();\n\n  // unwrap jQuery if provided\n  if (parentNode.get && parentNode.constructor.prototype.jquery) {\n    parentNode = parentNode.get(0);\n  }\n\n  if (typeof parentNode === 'string') {\n    parentNode = domQuery(parentNode);\n  }\n\n  parentNode.appendChild(this._container);\n\n  this._emit('attach', {});\n\n  this.get('canvas').resized();\n};\n\nBaseViewer.prototype.getDefinitions = function() {\n  return this._definitions;\n};\n\nBaseViewer.prototype.detach = function() {\n\n  var container = this._container,\n      parentNode = container.parentNode;\n\n  if (!parentNode) {\n    return;\n  }\n\n  this._emit('detach', {});\n\n  parentNode.removeChild(container);\n};\n\nBaseViewer.prototype._init = function(container, moddle, options) {\n\n  var baseModules = options.modules || this.getModules(),\n      additionalModules = options.additionalModules || [],\n      staticModules = [\n        {\n          bpmnjs: [ 'value', this ],\n          moddle: [ 'value', moddle ]\n        }\n      ];\n\n  var diagramModules = [].concat(staticModules, baseModules, additionalModules);\n\n  var diagramOptions = assign(omit(options, [ 'additionalModules' ]), {\n    canvas: assign({}, options.canvas, { container: container }),\n    modules: diagramModules\n  });\n\n  // invoke diagram constructor\n  Diagram.call(this, diagramOptions);\n\n  if (options && options.container) {\n    this.attachTo(options.container);\n  }\n};\n\n/**\n * Emit an event on the underlying {@link EventBus}\n *\n * @param  {String} type\n * @param  {Object} event\n *\n * @return {Object} event processing result (if any)\n */\nBaseViewer.prototype._emit = function(type, event) {\n  return this.get('eventBus').fire(type, event);\n};\n\nBaseViewer.prototype._createContainer = function(options) {\n\n  var container = domify('<div class=\"bjs-container\"></div>');\n\n  assign(container.style, {\n    width: ensureUnit(options.width),\n    height: ensureUnit(options.height),\n    position: options.position\n  });\n\n  return container;\n};\n\nBaseViewer.prototype._createModdle = function(options) {\n  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);\n\n  return new BpmnModdle(moddleOptions);\n};\n\nBaseViewer.prototype._modules = [];\n\n\n// helpers ///////////////\n\nfunction checkValidationError(err) {\n\n  // check if we can help the user by indicating wrong BPMN 2.0 xml\n  // (in case he or the exporting tool did not get that right)\n\n  var pattern = /unparsable content <([^>]+)> detected([\\s\\S]*)$/;\n  var match = pattern.exec(err.message);\n\n  if (match) {\n    err.message =\n      'unparsable content <' + match[1] + '> detected; ' +\n      'this may indicate an invalid BPMN 2.0 diagram file' + match[2];\n  }\n\n  return err;\n}\n\nvar DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '100%',\n  position: 'relative'\n};\n\n\n/**\n * Ensure the passed argument is a proper unit (defaulting to px)\n */\nfunction ensureUnit(val) {\n  return val + (isNumber(val) ? 'px' : '');\n}\n\n\n/**\n * Find BPMNDiagram in definitions by ID\n *\n * @param {ModdleElement<Definitions>} definitions\n * @param {String} diagramId\n *\n * @return {ModdleElement<BPMNDiagram>|null}\n */\nfunction findBPMNDiagram(definitions, diagramId) {\n  if (!diagramId) {\n    return null;\n  }\n\n  return find(definitions.diagrams, function(element) {\n    return element.id === diagramId;\n  }) || null;\n}\n\n\n/* <project-logo> */\n\nimport {\n  open as openPoweredBy,\n  BPMNIO_IMG\n} from './util/PoweredByUtil';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\n/**\n * Adds the project logo to the diagram container as\n * required by the bpmn.io license.\n *\n * @see http://bpmn.io/license\n *\n * @param {Element} container\n */\nfunction addProjectLogo(container) {\n  var img = BPMNIO_IMG;\n\n  var linkMarkup =\n    '<a href=\"http://bpmn.io\" ' +\n       'target=\"_blank\" ' +\n       'class=\"bjs-powered-by\" ' +\n       'title=\"Powered by bpmn.io\" ' +\n       'style=\"position: absolute; bottom: 15px; right: 15px; z-index: 100\">' +\n      img +\n    '</a>';\n\n  var linkElement = domify(linkMarkup);\n\n  container.appendChild(linkElement);\n\n  domEvent.bind(linkElement, 'click', function(event) {\n    openPoweredBy();\n\n    event.preventDefault();\n  });\n}\n\n/* </project-logo> */"]},"metadata":{},"sourceType":"module"}