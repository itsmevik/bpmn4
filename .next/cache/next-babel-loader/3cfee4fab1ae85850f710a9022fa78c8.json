{"ast":null,"code":"import inherits from 'inherits';\nimport { forEach } from 'min-dash';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { isEventSubProcess } from '../../../util/DiUtil';\n/**\n * BPMN-specific replace behavior.\n */\n\nexport default function ReplaceElementBehaviour(bpmnReplace, bpmnRules, elementRegistry, injector, modeling, selection) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection; // replace elements on move\n\n  this.postExecuted(['elements.move'], 500, function (event) {\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n    forEach(context.closure.topLevel, function (topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    }); // set target to host if attaching\n\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this); // update attachments on host replace\n\n  this.postExecute(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n  }, this); // keep ID on shape replace\n\n  this.postExecuted(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, {\n      id: oldShape.id\n    });\n  });\n}\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.prototype.replaceElements = function (elements, newElements) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection;\n  forEach(newElements, function (replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n    var idx = elements.indexOf(oldElement);\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, {\n      select: false\n    });\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = ['bpmnReplace', 'bpmnRules', 'elementRegistry', 'injector', 'modeling', 'selection'];","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/modeling/behavior/ReplaceElementBehaviour.js"],"names":["inherits","forEach","CommandInterceptor","isEventSubProcess","ReplaceElementBehaviour","bpmnReplace","bpmnRules","elementRegistry","injector","modeling","selection","invoke","_bpmnReplace","_elementRegistry","_selection","postExecuted","event","context","target","newParent","newHost","elements","closure","topLevel","topLevelElements","concat","children","length","canReplace","replaceElements","replacements","postExecute","e","oldShape","newShape","attachers","unclaimId","businessObject","id","updateProperties","prototype","newElements","replacement","newElement","type","newElementType","oldElement","get","oldElementId","idx","indexOf","replaceElement","select","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAEA,SAASC,iBAAT,QAAkC,sBAAlC;AAGA;;;;AAGA,eAAe,SAASC,uBAAT,CACXC,WADW,EAEXC,SAFW,EAGXC,eAHW,EAIXC,QAJW,EAKXC,QALW,EAMXC,SANW,EAOb;AACAF,EAAAA,QAAQ,CAACG,MAAT,CAAgBT,kBAAhB,EAAoC,IAApC;AAEA,OAAKU,YAAL,GAAoBP,WAApB;AACA,OAAKQ,gBAAL,GAAwBN,eAAxB;AACA,OAAKO,UAAL,GAAkBJ,SAAlB,CALA,CAOA;;AACA,OAAKK,YAAL,CAAkB,CAAE,eAAF,CAAlB,EAAuC,GAAvC,EAA4C,UAASC,KAAT,EAAgB;AAC1D,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,MAAM,GAAGD,OAAO,CAACE,SADrB;AAAA,QAEIC,OAAO,GAAGH,OAAO,CAACG,OAFtB;AAAA,QAGIC,QAAQ,GAAG,EAHf;AAKApB,IAAAA,OAAO,CAACgB,OAAO,CAACK,OAAR,CAAgBC,QAAjB,EAA2B,UAASC,gBAAT,EAA2B;AAC3D,UAAIrB,iBAAiB,CAACqB,gBAAD,CAArB,EAAyC;AACvCH,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBD,gBAAgB,CAACE,QAAjC,CAAX;AACD,OAFD,MAEO;AACLL,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBD,gBAAhB,CAAX;AACD;AACF,KANM,CAAP,CAN0D,CAc1D;;AACA,QAAIH,QAAQ,CAACM,MAAT,KAAoB,CAApB,IAAyBP,OAA7B,EAAsC;AACpCF,MAAAA,MAAM,GAAGE,OAAT;AACD;;AAED,QAAIQ,UAAU,GAAGtB,SAAS,CAACsB,UAAV,CAAqBP,QAArB,EAA+BH,MAA/B,CAAjB;;AAEA,QAAIU,UAAJ,EAAgB;AACd,WAAKC,eAAL,CAAqBR,QAArB,EAA+BO,UAAU,CAACE,YAA1C,EAAwDV,OAAxD;AACD;AACF,GAxBD,EAwBG,IAxBH,EARA,CAkCA;;AACA,OAAKW,WAAL,CAAiB,CAAE,eAAF,CAAjB,EAAsC,IAAtC,EAA4C,UAASC,CAAT,EAAY;AACtD,QAAIf,OAAO,GAAGe,CAAC,CAACf,OAAhB;AAAA,QACIgB,QAAQ,GAAGhB,OAAO,CAACgB,QADvB;AAAA,QAEIC,QAAQ,GAAGjB,OAAO,CAACiB,QAFvB;AAAA,QAGIC,SAAS,GAAGF,QAAQ,CAACE,SAHzB;AAAA,QAIIP,UAJJ;;AAMA,QAAIO,SAAS,IAAIA,SAAS,CAACR,MAA3B,EAAmC;AACjCC,MAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAV,CAAqBO,SAArB,EAAgCD,QAAhC,CAAb;AAEA,WAAKL,eAAL,CAAqBM,SAArB,EAAgCP,UAAU,CAACE,YAA3C;AACD;AAEF,GAbD,EAaG,IAbH,EAnCA,CAkDA;;AACA,OAAKf,YAAL,CAAkB,CAAE,eAAF,CAAlB,EAAuC,IAAvC,EAA6C,UAASiB,CAAT,EAAY;AACvD,QAAIf,OAAO,GAAGe,CAAC,CAACf,OAAhB;AAAA,QACIgB,QAAQ,GAAGhB,OAAO,CAACgB,QADvB;AAAA,QAEIC,QAAQ,GAAGjB,OAAO,CAACiB,QAFvB;AAIAzB,IAAAA,QAAQ,CAAC2B,SAAT,CAAmBH,QAAQ,CAACI,cAAT,CAAwBC,EAA3C,EAA+CL,QAAQ,CAACI,cAAxD;AACA5B,IAAAA,QAAQ,CAAC8B,gBAAT,CAA0BL,QAA1B,EAAoC;AAAEI,MAAAA,EAAE,EAAEL,QAAQ,CAACK;AAAf,KAApC;AACD,GAPD;AAQD;AAEDtC,QAAQ,CAACI,uBAAD,EAA0BF,kBAA1B,CAAR;;AAEAE,uBAAuB,CAACoC,SAAxB,CAAkCX,eAAlC,GAAoD,UAASR,QAAT,EAAmBoB,WAAnB,EAAgC;AAClF,MAAIlC,eAAe,GAAG,KAAKM,gBAA3B;AAAA,MACIR,WAAW,GAAG,KAAKO,YADvB;AAAA,MAEIF,SAAS,GAAG,KAAKI,UAFrB;AAIAb,EAAAA,OAAO,CAACwC,WAAD,EAAc,UAASC,WAAT,EAAsB;AACzC,QAAIC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAEF,WAAW,CAACG;AADH,KAAjB;AAIA,QAAIC,UAAU,GAAGvC,eAAe,CAACwC,GAAhB,CAAoBL,WAAW,CAACM,YAAhC,CAAjB;AAEA,QAAIC,GAAG,GAAG5B,QAAQ,CAAC6B,OAAT,CAAiBJ,UAAjB,CAAV;AAEAzB,IAAAA,QAAQ,CAAC4B,GAAD,CAAR,GAAgB5C,WAAW,CAAC8C,cAAZ,CAA2BL,UAA3B,EAAuCH,UAAvC,EAAmD;AAAES,MAAAA,MAAM,EAAE;AAAV,KAAnD,CAAhB;AACD,GAVM,CAAP;;AAYA,MAAIX,WAAJ,EAAiB;AACf/B,IAAAA,SAAS,CAAC0C,MAAV,CAAiB/B,QAAjB;AACD;AACF,CApBD;;AAsBAjB,uBAAuB,CAACiD,OAAxB,GAAkC,CAChC,aADgC,EAEhC,WAFgC,EAGhC,iBAHgC,EAIhC,UAJgC,EAKhC,UALgC,EAMhC,WANgC,CAAlC","sourcesContent":["import inherits from 'inherits';\n\nimport { forEach } from 'min-dash';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { isEventSubProcess } from '../../../util/DiUtil';\n\n\n/**\n * BPMN-specific replace behavior.\n */\nexport default function ReplaceElementBehaviour(\n    bpmnReplace,\n    bpmnRules,\n    elementRegistry,\n    injector,\n    modeling,\n    selection\n) {\n  injector.invoke(CommandInterceptor, this);\n\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection;\n\n  // replace elements on move\n  this.postExecuted([ 'elements.move' ], 500, function(event) {\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n\n    forEach(context.closure.topLevel, function(topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    });\n\n    // set target to host if attaching\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this);\n\n  // update attachments on host replace\n  this.postExecute([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n\n  }, this);\n\n  // keep ID on shape replace\n  this.postExecuted([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, { id: oldShape.id });\n  });\n}\n\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection;\n\n  forEach(newElements, function(replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n\n    var idx = elements.indexOf(oldElement);\n\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = [\n  'bpmnReplace',\n  'bpmnRules',\n  'elementRegistry',\n  'injector',\n  'modeling',\n  'selection'\n];\n"]},"metadata":{},"sourceType":"module"}