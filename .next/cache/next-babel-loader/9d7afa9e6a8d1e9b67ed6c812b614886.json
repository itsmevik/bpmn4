{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { isLabel } from '../../../util/LabelUtil';\nvar LOW_PRIORITY = 500;\n/**\n * Replace boundary event with intermediate event when creating or moving results in detached event.\n */\n\nexport default function DetachEventBehavior(bpmnReplace, injector) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  var self = this;\n  this.postExecuted('elements.create', LOW_PRIORITY, function (context) {\n    var elements = context.elements;\n    elements.filter(function (shape) {\n      var host = shape.host;\n      return shouldReplace(shape, host);\n    }).map(function (shape) {\n      return elements.indexOf(shape);\n    }).forEach(function (index) {\n      context.elements[index] = self.replaceShape(elements[index]);\n    });\n  }, true);\n  this.preExecute('elements.move', LOW_PRIORITY, function (context) {\n    var shapes = context.shapes,\n        newHost = context.newHost;\n    shapes.forEach(function (shape, index) {\n      var host = shape.host;\n\n      if (shouldReplace(shape, includes(shapes, host) ? host : newHost)) {\n        shapes[index] = self.replaceShape(shape);\n      }\n    });\n  }, true);\n}\nDetachEventBehavior.$inject = ['bpmnReplace', 'injector'];\ninherits(DetachEventBehavior, CommandInterceptor);\n\nDetachEventBehavior.prototype.replaceShape = function (shape) {\n  var eventDefinition = getEventDefinition(shape),\n      intermediateEvent;\n\n  if (eventDefinition) {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: eventDefinition.$type\n    };\n  } else {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateThrowEvent'\n    };\n  }\n\n  return this._bpmnReplace.replaceElement(shape, intermediateEvent, {\n    layoutConnection: false\n  });\n}; // helpers //////////\n\n\nfunction getEventDefinition(element) {\n  var businessObject = getBusinessObject(element),\n      eventDefinitions = businessObject.eventDefinitions;\n  return eventDefinitions && eventDefinitions[0];\n}\n\nfunction shouldReplace(shape, host) {\n  return !isLabel(shape) && is(shape, 'bpmn:BoundaryEvent') && !host;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/modeling/behavior/DetachEventBehavior.js"],"names":["inherits","CommandInterceptor","getBusinessObject","is","isLabel","LOW_PRIORITY","DetachEventBehavior","bpmnReplace","injector","invoke","_bpmnReplace","self","postExecuted","context","elements","filter","shape","host","shouldReplace","map","indexOf","forEach","index","replaceShape","preExecute","shapes","newHost","includes","$inject","prototype","eventDefinition","getEventDefinition","intermediateEvent","type","eventDefinitionType","$type","replaceElement","layoutConnection","element","businessObject","eventDefinitions","array","item"],"mappings":"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","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport {\n  getBusinessObject,\n  is\n} from '../../../util/ModelUtil';\n\nimport { isLabel } from '../../../util/LabelUtil';\n\nvar LOW_PRIORITY = 500;\n\n\n/**\n * Replace boundary event with intermediate event when creating or moving results in detached event.\n */\nexport default function DetachEventBehavior(bpmnReplace, injector) {\n  injector.invoke(CommandInterceptor, this);\n\n  this._bpmnReplace = bpmnReplace;\n\n  var self = this;\n\n  this.postExecuted('elements.create', LOW_PRIORITY, function(context) {\n    var elements = context.elements;\n\n    elements.filter(function(shape) {\n      var host = shape.host;\n\n      return shouldReplace(shape, host);\n    }).map(function(shape) {\n      return elements.indexOf(shape);\n    }).forEach(function(index) {\n      context.elements[ index ] = self.replaceShape(elements[ index ]);\n    });\n  }, true);\n\n  this.preExecute('elements.move', LOW_PRIORITY, function(context) {\n    var shapes = context.shapes,\n        newHost = context.newHost;\n\n    shapes.forEach(function(shape, index) {\n      var host = shape.host;\n\n      if (shouldReplace(shape, includes(shapes, host) ? host : newHost)) {\n        shapes[ index ] = self.replaceShape(shape);\n      }\n    });\n  }, true);\n}\n\nDetachEventBehavior.$inject = [\n  'bpmnReplace',\n  'injector'\n];\n\ninherits(DetachEventBehavior, CommandInterceptor);\n\nDetachEventBehavior.prototype.replaceShape = function(shape) {\n  var eventDefinition = getEventDefinition(shape),\n      intermediateEvent;\n\n  if (eventDefinition) {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: eventDefinition.$type\n    };\n  } else {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateThrowEvent'\n    };\n  }\n\n  return this._bpmnReplace.replaceElement(shape, intermediateEvent, { layoutConnection: false });\n};\n\n\n// helpers //////////\n\nfunction getEventDefinition(element) {\n  var businessObject = getBusinessObject(element),\n      eventDefinitions = businessObject.eventDefinitions;\n\n  return eventDefinitions && eventDefinitions[0];\n}\n\nfunction shouldReplace(shape, host) {\n  return !isLabel(shape) && is(shape, 'bpmn:BoundaryEvent') && !host;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}"]},"metadata":{},"sourceType":"module"}