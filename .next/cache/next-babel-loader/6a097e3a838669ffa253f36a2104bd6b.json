{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { isLabel } from '../../../util/LabelUtil';\n/**\n * Unclaims model IDs on element deletion.\n *\n * @param {Canvas} canvas\n * @param {Injector} injector\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n */\n\nexport default function UnclaimIdBehavior(canvas, injector, moddle, modeling) {\n  injector.invoke(CommandInterceptor, this);\n  this.preExecute('shape.delete', function (event) {\n    var context = event.context,\n        shape = context.shape,\n        shapeBo = shape.businessObject;\n\n    if (isLabel(shape)) {\n      return;\n    }\n\n    if (is(shape, 'bpmn:Participant') && isExpanded(shape)) {\n      moddle.ids.unclaim(shapeBo.processRef.id);\n    }\n\n    modeling.unclaimId(shapeBo.id, shapeBo);\n  });\n  this.preExecute('connection.delete', function (event) {\n    var context = event.context,\n        connection = context.connection,\n        connectionBo = connection.businessObject;\n    modeling.unclaimId(connectionBo.id, connectionBo);\n  });\n  this.preExecute('canvas.updateRoot', function () {\n    var rootElement = canvas.getRootElement(),\n        rootElementBo = rootElement.businessObject;\n    moddle.ids.unclaim(rootElementBo.id);\n  });\n}\ninherits(UnclaimIdBehavior, CommandInterceptor);\nUnclaimIdBehavior.$inject = ['canvas', 'injector', 'moddle', 'modeling'];","map":{"version":3,"sources":["/Users/believecreative/Kumar/bpmn/node_modules/bpmn-js/lib/features/modeling/behavior/UnclaimIdBehavior.js"],"names":["inherits","CommandInterceptor","is","isExpanded","isLabel","UnclaimIdBehavior","canvas","injector","moddle","modeling","invoke","preExecute","event","context","shape","shapeBo","businessObject","ids","unclaim","processRef","id","unclaimId","connection","connectionBo","rootElement","getRootElement","rootElementBo","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAEA,SAASC,EAAT,QAAmB,yBAAnB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAGA;;;;;;;;;AAQA,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,MAA7C,EAAqDC,QAArD,EAA+D;AAC5EF,EAAAA,QAAQ,CAACG,MAAT,CAAgBT,kBAAhB,EAAoC,IAApC;AAEA,OAAKU,UAAL,CAAgB,cAAhB,EAAgC,UAASC,KAAT,EAAgB;AAC9C,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIC,KAAK,GAAGD,OAAO,CAACC,KADpB;AAAA,QAEIC,OAAO,GAAGD,KAAK,CAACE,cAFpB;;AAIA,QAAIZ,OAAO,CAACU,KAAD,CAAX,EAAoB;AAClB;AACD;;AAED,QAAIZ,EAAE,CAACY,KAAD,EAAQ,kBAAR,CAAF,IAAiCX,UAAU,CAACW,KAAD,CAA/C,EAAwD;AACtDN,MAAAA,MAAM,CAACS,GAAP,CAAWC,OAAX,CAAmBH,OAAO,CAACI,UAAR,CAAmBC,EAAtC;AACD;;AAEDX,IAAAA,QAAQ,CAACY,SAAT,CAAmBN,OAAO,CAACK,EAA3B,EAA+BL,OAA/B;AACD,GAdD;AAiBA,OAAKJ,UAAL,CAAgB,mBAAhB,EAAqC,UAASC,KAAT,EAAgB;AACnD,QAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,QACIS,UAAU,GAAGT,OAAO,CAACS,UADzB;AAAA,QAEIC,YAAY,GAAGD,UAAU,CAACN,cAF9B;AAIAP,IAAAA,QAAQ,CAACY,SAAT,CAAmBE,YAAY,CAACH,EAAhC,EAAoCG,YAApC;AACD,GAND;AAQA,OAAKZ,UAAL,CAAgB,mBAAhB,EAAqC,YAAW;AAC9C,QAAIa,WAAW,GAAGlB,MAAM,CAACmB,cAAP,EAAlB;AAAA,QACIC,aAAa,GAAGF,WAAW,CAACR,cADhC;AAGAR,IAAAA,MAAM,CAACS,GAAP,CAAWC,OAAX,CAAmBQ,aAAa,CAACN,EAAjC;AACD,GALD;AAMD;AAEDpB,QAAQ,CAACK,iBAAD,EAAoBJ,kBAApB,CAAR;AAEAI,iBAAiB,CAACsB,OAAlB,GAA4B,CAAE,QAAF,EAAY,UAAZ,EAAwB,QAAxB,EAAkC,UAAlC,CAA5B","sourcesContent":["import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { isLabel } from '../../../util/LabelUtil';\n\n\n/**\n * Unclaims model IDs on element deletion.\n *\n * @param {Canvas} canvas\n * @param {Injector} injector\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n */\nexport default function UnclaimIdBehavior(canvas, injector, moddle, modeling) {\n  injector.invoke(CommandInterceptor, this);\n\n  this.preExecute('shape.delete', function(event) {\n    var context = event.context,\n        shape = context.shape,\n        shapeBo = shape.businessObject;\n\n    if (isLabel(shape)) {\n      return;\n    }\n\n    if (is(shape, 'bpmn:Participant') && isExpanded(shape)) {\n      moddle.ids.unclaim(shapeBo.processRef.id);\n    }\n\n    modeling.unclaimId(shapeBo.id, shapeBo);\n  });\n\n\n  this.preExecute('connection.delete', function(event) {\n    var context = event.context,\n        connection = context.connection,\n        connectionBo = connection.businessObject;\n\n    modeling.unclaimId(connectionBo.id, connectionBo);\n  });\n\n  this.preExecute('canvas.updateRoot', function() {\n    var rootElement = canvas.getRootElement(),\n        rootElementBo = rootElement.businessObject;\n\n    moddle.ids.unclaim(rootElementBo.id);\n  });\n}\n\ninherits(UnclaimIdBehavior, CommandInterceptor);\n\nUnclaimIdBehavior.$inject = [ 'canvas', 'injector', 'moddle', 'modeling' ];"]},"metadata":{},"sourceType":"module"}